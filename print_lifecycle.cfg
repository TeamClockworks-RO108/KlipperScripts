[include heatsoak.cfg]

#  P A R A M E T E R S :
#
# VERSION - Version of the slicer profile being used. Must be between (inclusive) slicer_version_min and (inclusive) slicer_version_max.
# BED - Target temp for bed
# EXTRUDER - Target temp for extruder
# ACTIONS - a string of underscore(_) separated words containing the actions to perform.
#     If missing, it will execute all of the available actions
#     Available actions: preheat, calibrate, fullheat, purge.
#

[gcode_macro PRINT_START]
description: Prepare for printing

# Oldest version to allow printing with
variable_slicer_version_min: 1
# Newest version to allow pringing with
variable_slicer_version_max: 1

# Put 1 to use bed mesh and QGL, 0 to use none of these features
variable_use_bed_mesh: 1

# Put 1 to wait for the extruder to reach preheat temperature if the temperature is above, 0 to ignore already heated extruder
variable_wait_for_extruder_cooldown: 1

# How many degrees under the target to preheat the extruder
variable_ext_preheat_offset: 80
# Maximum safe temperature the bed can be targeted to
variable_max_temperature_safety: 125
# How many degrees to overheat the bed before cooling to the right print temperature
variable_bed_overheat_amount: 10
# What extra fans to start to help with heat spreading
variable_extra_bed_fans: ["Nevermore", "bed_fans"]

# How many seconds to wait after heating the bed up with the part fan blowing (to disperse more heat)
variable_pause_heatsoak_bed_withfan: 60
# How many seconds to wait after heating the bed up AND after the part fan is turned off
# This setting can help equalize the bed assembly temperature.
variable_pause_heatsoak_bed_nofan: 400

# Layer height of the purge moves
variable_purge_layerheight: 0.25
# Length (total) of the purge line, including zigzag moves
variable_purge_line_length: 300
# Length of the straight section of the purge line
variable_purge_line_straight: 100
# X Coordinate of the purge starting point
variable_purge_line_start_x: 20
# Y Coordinate of the purge starting point
variable_purge_line_start_y: 0.3
# Extrusion width of the purge moves
variable_purge_width: 0.67
# How tall (Y) is a zigzag move
variable_zigzag_spacing: 2
# How wide (Y) is a zigzag move
variable_zigzag_width: 2
# Speed (in mm/s) of the zigzag moves
variable_zigzag_speed: 30

# Any extra parameters to add to the QUAD_GANTRY_LEVEL call
variable_qgl_extra_parameters: "PROBE_METHOD=CONTACT"
# Any extra parameters to add to the BED_MESH_CALIBRATE call
variable_mesh_extra_parameters: "PROBE_METHOD=CONTACT"

gcode:
    {% set action_string = params.ACTIONS|string if 'ACTIONS' in params else "preheat_calibrate_fullheat_purge" %}
    {% set bed_temp = params.BED|float if 'BED' in params else 115 %}
    {% set ext_temp = params.EXTRUDER|float if 'EXTRUDER' in params else 250 %}
    {% set ext_preheat_temp = 150 %}
    {% set bed_overheat_temp = bed_temp + bed_overheat_amount %}
    {% set bed_overheat_temp = bed_overheat_temp if bed_overheat_temp < max_temperature_safety else bed_overheat_temp %}
    {% set bed_overheat_mid_temp = (bed_overheat_temp + bed_temp) / 2 %}
    {% set filament_per_mm = (purge_width * purge_layerheight) / (1.75 * 1.75 * 3.14 * 0.25) %}
    {% set number_of_zigzag_iterations = ((purge_line_length - purge_line_straight) / (zigzag_spacing * 2)) %}

    # Check the VERSION field if printing from SD card, reject old version
    {% set complain_and_quit = false %}
    {% if printer.print_stats.filename or 'VERSION' in params %}
      {% if 'VERSION' in params %}
        {% set verstr = params.VERSION|string %}
        {% if verstr|length > 0 and verstr.isdigit() %}
          {% set ver = params.VERSION|int %}
          {% if ver < slicer_version_min %}
            {% set complain_and_quit = true %}
            {% set complain_reason = "Version string {} is less than the minimum accepted of {}. Ask for help on how to update your slicer profile.".format(params.VERSION, slicer_version_min) %}
          {% endif %}
          {% if ver > slicer_version_max %}
            {% set complain_and_quit = true %}
            {% set complain_reason = "Version string {} is more than the maximum accepted of {}. Ask for help on how to update your slicer profile.".format(params.VERSION, slicer_version_max) %}
          {% endif %}
        {% else %}
          {% set complain_and_quit = true %}
          {% set complain_reason = "Version string {} is not a parsable integer. Ask for help on how to update your slicer profile.".format(params.VERSION) %}
        {% endif %}
      {% else %}
        {% set complain_and_quit = true %}
        {% set complain_reason = "Version string is not supplied. Ask for help on how to update your slicer profile." %}
      {% endif %}
      {% if complain_and_quit %}
        # End the print. Complain.
        RESPOND TYPE=error MSG="{complain_reason}"
        {% if printer.print_stats.filename %}
          CANCEL_PRINT
        {% endif %}
      {% endif %}
    {% endif %}

    {% if not complain_and_quit %}

      {% if 'preheat' in action_string %}

        # Heat bed to overheat temperature
        HEATSOAK TARGET={bed_overheat_temp}

        # Heat extruder to PREHEAT temperature
        M104 S{ext_preheat_temp}

        # Wait for preheat temp and home
        {% if wait_for_extruder_cooldown > 0 and printer.extruder.temperature > ext_preheat_temp + 5 %}
            # Blow hotend fans to aid in cooling
            M106 S255
            TEMPERATRE_WAIT SENSOR=extruder MAXIMUM={ext_preheat_temp + 5}
            M106 S0
        {% else %}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ext_preheat_temp - 5}
        {% endif %}
        M84
        G28
        # Go to center and blow fans
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z8 F{60 * 200}
        {% for fan in extra_bed_fans %}
          SET_FAN_SPEED FAN={fan} SPEED=1
        {% endfor %}
        M106 S255


        # Wait for bed to reach mid, set mid as target, dwell, set final temp as target, wait, dwell (if neccesarry)
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_overheat_mid_temp}
        M140 S{bed_overheat_mid_temp}
        G4 P{pause_heatsoak_bed_withfan * 1000}
        M190 S{bed_temp}
        M106 S0

      {% endif %}

      {% if 'calibrate' in action_string %}

        # run the meshing sequnce
        {% if use_bed_mesh > 0 %}
          BED_MESH_CLEAR
          QUAD_GANTRY_LEVEL {qgl_extra_parameters}
          BED_MESH_CALIBRATE {mesh_extra_parameters}
        {% else %}
          BED_MESH_CLEAR
        {% endif %}

      {% endif %}

      # Heat extruder to final temperature
      {% if 'fullheat' in action_string %}
        M104 S{ext_temp}
        M109 S{ext_temp}
      {% endif %}
      
      {% if 'purge' in action_string %}
        # Set layer count if available
        {% if 'TOTAL_LAYER' in params %}
          SET_PRINT_STATS_INFO TOTAL_LAYER={params.TOTAL_LAYER|int}
        {% endif %}

        # Print a purge line
        G90 ; use absolute coordinates
        M83 ; extruder relative mode
        {% set zigzag_origin = purge_line_start_x + purge_line_straight %}
        G0 Y{purge_line_start_y} X{purge_line_start_x} F{60 * 300}
        G0 Z0.3 F720
        G92 E0
        G1 E5 F1000 ; intro blob
        G1 X{zigzag_origin} E{purge_line_straight * filament_per_mm * 1.5} F{zigzag_speed * 60} ; intro line, fatter
        {% for i in range(0, number_of_zigzag_iterations|int) %}
          G1 X{zigzag_origin + zigzag_spacing * i * 2} Y{purge_line_start_y + zigzag_width} E{zigzag_width * filament_per_mm} F{zigzag_speed * 60}
          G1 X{zigzag_origin + zigzag_spacing * i * 2 + zigzag_spacing} Y{purge_line_start_y + zigzag_width} E{zigzag_spacing * filament_per_mm} F{zigzag_speed * 60}
          G1 X{zigzag_origin + zigzag_spacing * i * 2 + zigzag_spacing} Y{purge_line_start_y} E{zigzag_width * filament_per_mm} F{zigzag_speed * 60}
          G1 X{zigzag_origin + zigzag_spacing * i * 2 + zigzag_spacing * 2} Y{purge_line_start_y} E{zigzag_spacing * filament_per_mm} F{zigzag_speed * 60}
        {% endfor %}
        # Jump to end
        G0 X340 F{60 * 300}
        G92 E0

      {% endif %}

    {% endif %}
